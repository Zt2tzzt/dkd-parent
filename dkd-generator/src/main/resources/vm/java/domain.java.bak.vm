// 包声明
package ${packageName}.domain;

// 导入列表
#foreach ($import in $importList)
import ${import};
#end

// 导入常用工具类
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import com.dkd.common.annotation.Excel;

// 根据表类型导入不同的基类
#if($table.crud || $table.sub)
import com.dkd.common.core.domain.BaseEntity;
#elseif($table.tree)
import com.dkd.common.core.domain.TreeEntity;
#end

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
    #if($table.crud || $table.sub)
        #set($Entity="BaseEntity")
    #elseif($table.tree)
        #set($Entity="TreeEntity")
    #end
        public class ${ClassName} extends ${Entity}
        {
        private static final long serialVersionUID = 1L; ## 定义类的序列号

    ## 获取业务表所有列的属性
    #foreach ($column in $columns)
        ## 如果不是父类属性，则生成
        #if(!$table.isSuperColumn($column.javaField))
                /** $column.columnComment */
            #if($column.list)
                #set($parentheseIndex=$column.columnComment.indexOf("（"))
                #if($parentheseIndex != -1)
                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                #else
                    #set($comment=$column.columnComment)
                #end
                #if($parentheseIndex != -1)
                @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
                #elseif($column.javaType == 'Date')
                @JsonFormat(pattern = "yyyy-MM-dd")
                @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
                #else
                @Excel(name = "${comment}")
                #end
            #end
        private $column.javaType $column.javaField;

        #end
    #end

    ## 如果表有子表，定义子表信息的集合
    #if($table.sub)
            /** $table.subTable.functionName信息 */
            private List<${subClassName}> ${subclassName}List;

    #end
    ## 为每个属性字段生成 getter、setter 方法
    #foreach ($column in $columns)
        #if(!$table.isSuperColumn($column.javaField))
            #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                #set($AttrName=$column.javaField)
            #else
                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
            #end
                public void set${AttrName}($column.javaType $column.javaField) {
                    this.$column.javaField = $column.javaField;
                }

                public $column.javaType get${AttrName}() {
                    return $column.javaField;
                }
        #end
    #end

    #if($table.sub)
            public List<${subClassName}> get${subClassName}List() {
                return ${subclassName}List;
            }

            public void set${subClassName}List(List<${subClassName}> ${subclassName}List) {
                this.${subclassName}List = ${subclassName}List;
            }

    #end
        @Override
        public String toString() {
            return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
                #foreach ($column in $columns)
                    #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                        #set($AttrName=$column.javaField)
                    #else
                        #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                    #end
                .append("${column.javaField}", get${AttrName}())
                #end
                #if($table.sub)
                        .append("${subclassName}List", get${subClassName}List())
                        #end
                    .toString();
        }
}
// 包声明
package ${packageName}.domain;

// 导入列表
    #foreach ($import in $importList)
    import ${import};
    #end

// 导入常用工具类
import com.dkd.common.annotation.Excel;

// 根据表类型导入不同的基类
    #if($table.crud || $table.sub)
    import com.dkd.common.core.domain.BaseEntity;
    #elseif($table.tree)
    import com.dkd.common.core.domain.TreeEntity;
    #end

    ## 导入 lombok 注解
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
    #if($table.crud || $table.sub)
        #set($Entity="BaseEntity")
    #elseif($table.tree)
        #set($Entity="TreeEntity")
    #end
        @EqualsAndHashCode(callSuper = true)
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        public class ${ClassName} extends ${Entity} {
        private static final long serialVersionUID = 1L; ## 定义类的序列号

    ## 获取业务表所有列的属性
    #foreach ($column in $columns)
        ## 如果不是父类属性，则生成
        #if(!$table.isSuperColumn($column.javaField))
                /** $column.columnComment */
            #if($column.list)
                #set($parentheseIndex=$column.columnComment.indexOf("（"))
                #if($parentheseIndex != -1)
                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                #else
                    #set($comment=$column.columnComment)
                #end
                #if($parentheseIndex != -1)
                @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
                #elseif($column.javaType == 'Date')
                @JsonFormat(pattern = "yyyy-MM-dd")
                @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
                #else
                @Excel(name = "${comment}")
                #end
            #end
        private $column.javaType $column.javaField;

        #end
    #end

    ## 如果表有子表，定义子表信息的集合
    #if($table.sub)
            /** $table.subTable.functionName信息 */
            private List<${subClassName}> ${subclassName}List;
    #end
        }